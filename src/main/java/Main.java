/**
 * Created by Jetflash on 25.05.2017.
 */
public class Main implements MainInterface {
    //Игровое поле размером 20 на 20
    String[][] sign = new String[20][20];
    String PlayerX = "X";
    String PlayerO = "O";
    String EMPTY = " ";
    //Счетчик для поиска комбинаций одинаковых символов
    int count;
    /*Переменные инициализирующиеся по принципу srand от 0 до 20 для метода RandomCell. На практике они будут в методе
    но для удобства тестирования вынесены как отдельные переменные*/
    int randCol, randRow;

    //Данный метод инициализирует игровое поле путем заполнения массива символом пробела
    public void init() {
        /*Т.к. метод ничего не возвращает, тестировать нужно ожидаемый результат его работы.
        Ожидаемый результат работы, это массив заполненый значениями EMPTY. Данный массив для теста будет заполнен через
        цикл for, хотя, как на самом деле работает метод init() - неизвестно. Заполнение массива может идти, как через
        циклы for/while или же как предоставил пример один из наших студентов, когда каждый элемент массива инициализируется
        отдельно. Вариантов много, но ни один из них не известен, так тест идет методом черного ящика.
         */
        for (int i = 0; i < sign.length; i++) {
            for (int j = 0; j < sign.length; j++) {
                sign[i][j] = EMPTY;
            }
        }
    }
    //При создании объекта класса, игровое поле сразу же инициализируется
    public Main(){
        init();
    }


    /*Данный метод ставит символ в заданные координаты поля. В методе проверяется свободна
    ли ячейка, если ячейка свободна - поставить метку PlayerX. Если ячейка занята - метка не ставится.
     */
    public boolean markFirstPlayer(String figure, int col, int row) {
        return sign[col][row].equals(figure);
    }
    /*Данный метод ставит символ в заданные координаты поля. В методе проверяется свободна
    ли ячейка, если ячейка свободна - поставить метку PlayerO. Если ячейка занята - метка не ставится.
     */
    public boolean markSecondPlayer(String figure, int col, int row) {
         return sign[col][row].equals(figure);
    }
    /*Если игра только началась (поле полностью пустое) или же все доступные ходы перекрыты, метка устанавливается
    в случайную свободную ячейку*/
    public boolean RandomCell(String figure) {
        return sign[randCol][randRow].equals(figure);
    }
    /*Метод ищет три подряд одинаковых символа по столбцам, колонкам и диагоналям. Если символ найден, счетчик count
    увеличивается на единицу, если в следующей ячейке обнаружен такой же символ, счетчик снова увеличиваются на единицу
    и так до трех. Затем метод проверяет граничащие с комбинацией ячейки на пустоту (можно ли поставить символ) и если
    можно ставит символ и увеличивает счетчик до 4 выходя из метода. При ситуациях, когда метод находит одинаковые символы,
    но следующая ячейка пуста или занята другим символом счетчик обнуляется. При каждом новом запуске метода - счетчик
    обнуляется.
     */
    public int WinCell(String figure) {return count;}

    /*Метод ищет два подряд одинаковых символа по столбцам, колонкам и диагоналям. Если символ найден, счетчик count
     увеличивается на единицу, если в следующей ячейке обнаружен такой же символ, счетчик снова увеличиваются на единицу
     и так до двух. Затем метод проверяет граничащие с комбинацией ячейки на пустоту (можно ли поставить символ) и если
     можно ставит символ и увеличивает счетчик до 3 выходя из метода. При ситуациях, когда метод находит одинаковые символы,
     но следующая ячейка пуста или занята другим символом счетчик обнуляется. При каждом новом запуске метода - счетчик
     обнуляется.*/
    public int ThreeCell(String figure) {
        return count;
    }
    /*Метод ищет один  символ. Если символ найден, счетчик count увеличивается на единицу. Затем метод проверяет граничащие
     ячейки на пустоту (можно ли поставить символ) и если  можно ставит символ и увеличивает счетчик до 2 выходя из метода.
     При ситуациях, когда метод находит символ, но следующая ячейка пуста или занята другим символом счетчик обнуляется.
     При каждом новом запуске метода - счетчик обнуляется.*/
    public int TwoCell(String figure) {
        return count;
    }
}
